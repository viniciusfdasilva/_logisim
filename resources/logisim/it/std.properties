#
# std/Builtin.java
#
builtinLibrary = Libreria interna
# instance/StdAttr.java
stdFacingAttr = Orientamento
stdDataWidthAttr = Bit di Dati
stdTriggerAttr = Innesco
stdTriggerRising = Fronte di Salita
stdTriggerFalling = Fronte di Discesa
stdTriggerHigh = Livello Alto
stdTriggerLow = Livello Basso
stdLabelAttr = Etichetta
stdLabelFontAttr = Font Etichetta
# instance/InstanceTextField.java
changeLabelAction = Cambia Etichetta
#
# std/base/Base.java
#
baseLibrary = Strumenti Base

# std/base/BitExtender.java
extenderComponent = Estensore di Bit
extenderInAttr = Bit in Entrata
extenderOutAttr = Bit in Uscita
extenderTypeAttr = Tipo di estensione
extenderOneType = Uno
extenderZeroType = Zero
extenderSignType = Segno
extenderInputType = Input
extenderMainLabel = Estendi
extenderOneLabel = 1
extenderZeroLabel = 0
extenderSignLabel = segno
extenderInputLabel = input

# std/base/Clock
clockComponent = Clock
clockHighAttr = Durata Livello Alto
clockLowAttr = Durata Livello Basso
clockDurationValue = %s Fronti di Clock
clockDurationOneValue = 1 Fronte di Clock
durationSmallMessage = Il valore deve essere almeno %s.
durationLargeMessage = Il valore deve essere %s o meno.
freqInvalidMessage = Il valore non è un intero valido

# std/base/Pin
pinComponent = Pin
pinInputName = Input
pinOutputName = Output
pinThreeStateAttr = Three-state?
pinOutputAttr = Output?
pinPullAttr = Funzionamento alla Pressione
pinPullNoneOption = Senza Cambiamenti
pinPullUpOption = Spinta Su
pinPullDownOption = Spinta Giù
pinLabelLocAttr = Locazione Etichetta
pinInputToolTip = Aggiungi un pin di entrata
pinOutputToolTip = Aggiungi un pin di uscita
pinFrozenTitle = Pin Collegato Al Circuito Superiore.
pinFrozenQuestion = Pin collegato allo stato del circuito superiore. Creare un nuovo stato del circuito?

# std/base/Probe
probeComponent = Sonda

# std/base/PullResistor
pullComponent = Resistore 
pullTypeAttr = Direzione Resistenza
pullZeroType = Zero
pullOneType = Uno
pullErrorType = Errore

# std/base/Text.java
textComponent = Etichetta
textTextAttr = Testo
textFontAttr = Font
textHorzAlignAttr = Allineamento orizzontale
textHorzAlignLeftOpt = Sinistra
textHorzAlignRightOpt = Destra
textHorzAlignCenterOpt = Centro
textVertAlignAttr = Allineamento Verticale
textVertAlignTopOpt = Sopra
textVertAlignBaseOpt = Base
textVertAlignBottomOpt = Sotto
textVertAlignCenterOpt = Centro

# std/base/Tunnel.java
tunnelComponent = Tunnel

#
# std/Wiring.java
#
wiringLibrary = Connessioni
wiringGateAttr = Posizione Porta
wiringGateBottomRightOption = Sotto/Destra
wiringGateTopLeftOption = Sopra/Sinistra

# std/wiring/Transistor.java
transistorComponent = Transistor
transistorTypeAttr = Tipo
transistorTypeP = P-Tipo
transistorTypeN = N-Tipo

# std/wiring/TransmissionGate.java
transmissionGateComponent = Porta di Trasmissione

# std/wiring/Power.java
powerComponent = Alimentazione

# std/wiring/Ground.java
groundComponent = Terra

#
# std/Gates.java
#
gatesLibrary = Porte
gateSizeAttr = Dimensione Porta
gateSizeNarrowOpt = Piccola
gateSizeNormalOpt = Media
gateSizeWideOpt = Grande
gateNegateAttr = Nega %s
gateInputsAttr = Numero di Input
gateOutput01 = 0/1
gateOutput0Z = 0/floating
gateOutputZ1 = floating/1
gateOutputAttr = Valore Uscita
xorBehaviorAttr = Funzionamento Ingressi Multipli 
xorBehaviorOne = Con un solo ingresso attivo
xorBehaviorOdd = Con numero dispari di ingressi attivi 
# std/Constant.java
constantComponent = Costante
constantValueAttr = Valore
# std/NotGate.java
notGateComponent = Porta NOT
# std/Buffer.java
bufferComponent = Buffer
# std/AndGate.java
andGateComponent = Porta AND
# std/NandGate.java
nandGateComponent = Porta NAND 
# std/NorGate.java
norGateComponent = Porta NOR 
# std/OrGate.java
orGateComponent = Porta OR 
# std/XorGate.java
xorGateComponent = Porta XOR 
# std/XnorGate.java
xnorGateComponent = Porta XNOR 
# std/OddParityGate.java
oddParityComponent = Parità Dispari
# std/EvenParityGate.java
evenParityComponent = Parità Pari
# std/ControlledBuffer.java
controlledBufferComponent =  Buffer Controllato
controlledInverterComponent = Inverter Controllato
controlledControlOption = Posizione Linea Controllo
controlledLeftHanded = Verso sinistra
controlledRightHanded = Verso destra
NegateBufferControl = Nega Input Controllo
#
# std/TTL.java
#
VccGndPorts = Includi pin Vcc/Gnd
ShowInternalStructure = Mostra Struttura Interna
LampTestInTip = Lamp Test: quando è 0, imposta il valore di tutti gli output a 1
BlankingInputInTip = Blanking Input: quando è 0, imposta il valore di tutti gli output a 0
RippleBlankingInputInTip = Ripple Blanking Input: quando è 0 e A, B, C, D sono 0, imposta il valore di tutti gli output a 0
#
# std/Memory.java
#
memoryLibrary = Memoria
memEnableLabel = en
# AbstractFlipFlop.java
flipFlopClockTip = Clock: lo stato si aggiorna all'innesco
flipFlopQTip = Attuale stato del flip-flop
flipFlopNotQTip = Complemento dell'attuale stato dei flip-flop
flipFlopResetTip = Clear: quando è 1, lo stato dei pin diventa 0 in modo asincrono
flipFlopPresetTip = Preset: quando è 0, lo stato dei pin diventa 1 in modo asincrono
flipFlopEnableTip = Abilita: quando è 0, i colpi di clock non hanno effetto
PresetClearPosition = Posizione Preset/Clear
AboveBelow = Sopra/Sotto
BelowAbove = Sotto/Sopra
Legacy = Legacy
NegatePresetClear = Nega input Preset/Clear
NewFFLayout = Usa nuovo layout
# std/Counter.java
counterComponent = Contatore
counterMaxAttr   = Valore Massimo
counterGoalAttr  = Azione Overflow
counterGoalWrap  = Ricomincia
counterGoalStay  = Rimane al valore
counterGoalContinue = Continua a contare 
counterGoalLoad  = Carica il prossimo valore
counterQTip      = Uscita: valore corrente del contatore
counterClockTip  = Clock: il valore potrebbe aggiornarsi al prossimo colpo di clock
counterDataTip   = Dati: valore da caricare nel contatore
counterLoadTip   = Carica: quando è 1, carica dai dati di ingresso (se Conta = 0) o decrementa
counterEnableTip = Conta: quando è 1, incrementa (o decrementa se Carica = 1)
counterResetTip  = Clear: quando è 1, resetta a 0 in modo asincrono
counterCarryTip  = Riporto: è 1 quando il valore raggiunge il massimo (minimo se si sta decrementando)
counterEnableLabel = ct
counterLabel = ctr
# std/DFlipFlop.java
dFlipFlopComponent = Flip-Flop D
# std/TFlipFlop.java
tFlipFlopComponent = Flip-Flop T
# std/JKFlipFlop.java
jkFlipFlopComponent = Flip-Flop J-K
# std/PlaRom.java
PlaRomComponent = PLA ROM
PlaOutputsAttr = Numero di Output
PlaANDAttr = Numero di AND interni
PlaRomCleartip = Clear: quando è 1, rimuove tutti i collegamenti del componente
PlaRomEnabletip = Abilita: quando è 0, disabilita il componente
# std/SRFlipFlop.java
srFlipFlopComponent = Flip-Flop S-R
# std/Random.java
randomSeedAttr = Seme
randomComponent = Generatore Casuale
randomQTip = Uscita: Numero corrente in sequenza
randomClockTip = Clock: il valore potrebbe aggiornarsi al prossimo colpo di clock
randomNextTip = Abilita: passa al successivo al prossimo colpo di clock
randomResetTip = Clear: Quando è 1, resetta al numero iniziale in modo asincrono
# std/Register.java
registerComponent = Registro
registerQTip = Uscita: valore corrente del registro
registerDTip = Dati: valori immagazzinati al colpo di clock
registerClkTip = Clock: aggiorna i valori al colpo di clock
registerClrTip = Clear: quando è 1, porta il valore a 0 istantaneamente
registerEnableTip = Abilita: quando è 0, i colpi di clock non hanno effetto
registerLabel = reg
registerWidthLabel = (%sb)
# std/RamFactory.java
ramComponent = RAM
# std/RomFactory.java
romComponent = ROM
romContentsAttr = Contenuti
romContentsValue = (clicca per editare)
romChangeAction = Edita i contenuti della ROM 
# std/Ram.java
ramAddrWidthAttr = Numero bit indirizzo
ramDataWidthAttr = Numero bit dati
ramDataLabel = D
ramAddrLabel = A
ramWELabel = str
ramCSLabel = sel
ramOELabel = ld
ramClrLabel = clr
ramGigabyteLabel = %sGB RAM
ramMegabyteLabel = %sMB RAM
ramKilobyteLabel = %sKB RAM
ramByteLabel = %sB RAM
romGigabyteLabel = %sGB ROM
romMegabyteLabel = %sMB ROM
romKilobyteLabel = %sKB ROM
romByteLabel = %sB ROM
memDataTip = Dati: valore caricato da indirizzo
memAddrTip = Indirizzo: luogo acceduto in memoria
memCSTip = Chip select: 0 disabilita i componeneti
ramClkTip = Clock: Aggiorna i valori in memoria quando in salita da 0 a 1
ramOETip = Carica: se 1, carica la memoria all'output
ramWETip = Magazzino: se 1, immagazzina l'input in memoria
ramClrTip = Clear: quando 1, aggiorna immediatamete i valori a 0
ramBusTip = Dati: i valori caricati in memoria
ramInTip = Input: valore da memorizzare nell'indirizzo
ramBusAttr =Interfaccia dati
ramBusSynchCombined = Una porta sincrona di caricamento/memorizzazione
ramBusAsynchCombined =Una porta asincrona di caricamento/memorizzazione
ramBusSeparate = Separa le porte di caricamento e memorizzazione
ramEditMenuItem = Modifica Contenuti...
ramClearMenuItem = Cancella Contenuti
ramLoadMenuItem = Carica Immagine
ramSaveMenuItem = Salva immagine...
ramConfirmClearTitle = Conferma Cancellazione
ramConfirmClearMsg = Sei sicuro di voler azzerare la memoria?
ramLoadDialogTitle = Carica Immagine Della RAM
ramLoadErrorTitle = Errore Caricamento
ramSaveDialogTitle = Salva Immagine Della RAM
ramSaveErrorTitle = Errore Salvataggio
# std/memory/ShiftRegister.java
shiftRegisterComponent =  Registro a scorrimento
shiftRegisterLabel1 = reg a scorr
shiftRegisterLabel2 = %sx%s
shiftRegLengthAttr = Numero di Stadi
shiftRegParallelAttr = Caricamento Parallelo
shiftRegShiftTip = Scorrimento: lo scorrimento è disabilitato quando = 0
shiftRegClockTip = Clock: il valore si aggiorna al colpo di clock
shiftRegClearTip = Clear: quando = 1, porta tutto a 0 in modo asincrono
shiftRegInTip    = Input: Valore da scorrere nel primo stadio 
shiftRegOutTip   = Output: è il contenuto dell' ultimo stadio
shiftRegLoadTip  = Caricamento: quando 1 (con scorrimento = 0), tutti gli stadi caricati da input
#
# std/Plexers.java
#
plexerLibrary = Plexers
plexerSelectBitsAttr =  Bits di Selezione
plexerThreeStateAttr = Three-state?
plexerDisabledAttr = Output disabilitato
plexerDisabledFloating = Floating
plexerDisabledZero = Zero
plexerEnableAttr = Includere Abilitazione?
plexerSelectLocAttr = Seleziona Locazione
plexerSelectTopRightOption = Sopra/Destra
plexerSelectBottomLeftOption = Sotto/Sinistra
# std/Multiplexer.java
multiplexerComponent = Multiplexer
multiplexerSelectTip = Selezione: identifica quali input diventano output
multiplexerEnableTip = Abilita: quando è diverso da 0, l'output è uguale all'input selezionato
multiplexerInTip = Input %s
multiplexerOutTip = Output
# std/Demultiplexer.java
demultiplexerComponent = Demultiplexer
demultiplexerSelectTip = Selezione: identifica quali output ricevono input
demultiplexerEnableTip = Abilita: quando è diverso da 0, l'output selezionato è uguale all'input
demultiplexerInTip = Input
demultiplexerOutTip = Output %s
# std/Decoder.java
decoderComponent = Decoder
decoderSelectTip = Selezione: identifica quale output è 1
decoderEnableTip = Abilita: quando è diverso da 0, l'output selezionato è 1
decoderOutTip = Output %s
# std/DisplayDecoder.java
DisplayDecoderComponent = Decoder Display 7-Segmenti
DisplayDecoderOutTip = Output %s
DisplayDecoderInTip = Input %s
# std/plexers/PriorityEncoder.java
priorityEncoderComponent = Encoder a Priorità
priorityEncoderInTip = Input %s
priorityEncoderOutTip = Output: indizizzo dell'ingresso attivo con indice maggiore
priorityEncoderEnableInTip = Input Abilita: 0 disabilita il componente
priorityEncoderEnableOutTip = Output Abilita: 1 se è abilitato e non ci sono ingressi attivi
priorityEncoderGroupSignalTip = Seleziona Gruppo: 1 se è abilitato e ogni ingresso è 1
# std/BitSelector.java
bitSelectorComponent = Selettore di Bit 
bitSelectorGroupAttr = Bit di Output
bitSelectorOutputTip = Output: valore del gruppo selezionato di bit dai dati
bitSelectorDataTip = Dati
bitSelectorSelectTip = Selezione: identifica quale gruppo di bit è selezionato
#
# arith/Arithmetic.java
#
arithmeticLibrary = Aritmetica
# arith/Adder.java
adderComponent = Sommatore
adderInputTip = Input: uno dei numeri da aggiungere
adderOutputTip = Output: la somma degli input (più il riporto in entrata)
adderCarryInTip = Riporto in entrata: se è 1, aggiunge un altro 1 all'uscita
adderCarryOutTip = Riporto in uscita: è 1 se la somma supera i bit disponibili
# arith/Subtractor.java
subtractorComponent = Sottrattore
subtractorMinuendTip = Minuendo: il numero dal quale avverrà la sottrazione
subtractorSubtrahendTip = Sottraendo: il numero da sottrarre al minuendo
subtractorOutputTip = Output: la differenza tra minuendo e sottraendo
subtractorBorrowInTip = Prestito in ingresso: se è 1, l'output è diminuito di 1
subtractorBorrowOutTip =  Prestito in uscita: è 1 se la differenza produce un valore negativo
# arith/Multiplier.java 
multiplierComponent = Moltiplicatore
multiplierInputTip = Input: uno dei numeri da moltiplicare
multiplierOutputTip = Output: il prodotto dei numeri più il riporto
multiplierCarryInTip = Riporto in entrata: un ammontare da aggiungere all'uscita
multiplierCarryOutTip = Riporto in uscita: i bit più significativi del prodotto 
# arith/Divider.java
dividerComponent = Divisore
dividerUpperInput = superiore
dividerRemainderOutput = resto
dividerDividendLowerTip = Dividendo minore: la metà minore del numero da dividere
dividerDividendUpperTip = Dividendo maggiore: la metà maggiore del numero da dividere
dividerDivisorTip = Divisore: il numero che dividerà
dividerOutputTip = Output: il risultato della divisione
dividerRemainderTip = Resto: il resto (dividendo - output * divisore)
# arith/Negator.java
negatorComponent = Negatore
negatorInputTip = Input: il numero da negare
negatorOutputTip = Output: la negazione a due complementi dell'input
# arith/Comparator.java
comparatorComponent = Comparatore
comparatorType = Tipo numerico
unsignedOption = Senza segno
twosComplementOption = Complemento di 2
comparatorInputATip = A: il numero che precede l'operazione di comparazione
comparatorInputBTip = B: il numero che segue l'operazione di comparazione
comparatorLessTip = Minore: 1 se A è minore di B
comparatorEqualTip = Uguale: 1 se A è uguale a B
comparatorGreaterTip = Maggiore: 1 se A è maggiore di B
# arith/Shifter.java
shifterComponent = Scorritore
shifterShiftAttr = Tipo di scorrimento
shiftLogicalLeft = Logica a Sinistra
shiftLogicalRight = Logica a Destra
shiftArithmeticRight = Aritmetica Destra
shiftRollLeft = Ruota a Sinistra
shiftRollRight = Ruota a Destra
shifterDistanceTip = Distanza: Quanto lontano far scorrere l'input
shifterInputTip = Input: bit che devono essere fatti scorrere
shifterOutputTip = Output: risultato dello scorrimento dell'input
# arith/BitAdder.java
bitAdderComponent = Sommatore di bit
bitAdderInputTip = Input: i bit che devono essere contati
bitAdderOutputManyTip = Output: quanti bit di ingresso sono 1
# arith/BitFinder.java
bitFinderComponent = Trovatore di Bit 
bitFinderFindLabel = trova
bitFinderHighLabel = alto
bitFinderLowLabel = basso
bitFinderHighOption = %s ordine più alto
bitFinderLowOption = %s di ordine più basso
bitFinderTypeAttr = Tipo
bitFinderIndexHighTip = Indice: indice dell'ordine più alto %s
bitFinderIndexLowTip = Index: indice dell'ordine più basso %s
bitFinderPresentTip = Present: 1 se l'input contiene un %s
bitFinderInputTip = Input: i bit da cercare
# arith/Pow.java
powComponent= Potenza
powInputNumTip= Input: Numero
powInputExpTip= Input: Esponente
powOutputTip= Output: Numero^Esponente
#
# io
#
# io/Io.java
ioLibrary = Input/Output
ioLabelCenter = Centro
ioBitWidthAttr = Numero Bit
ioColorAttr = Colore
ioLabelLocAttr = Posizione Etichetta
ioLabelColorAttr = Colore Etichetta
ioActiveAttr = Attivo su livello alto?
# io/Button.java
buttonComponent = Pulsante
# io/Switch.java
switchComponent = Interruttore
# io/Joystick.java
joystickComponent = Joystick
# io/Keyboard.java
keyboardComponent = Tastiera
keybDesc = Tastiera (buffer cap. %s)
keybBufferLengthAttr = Lunghezza Buffer
keybClearTip = Clear: 1 svuota i buffer 
keybClockTip = Clock: all'aggiornamento legge il carattere frontale del buffer
keybEnableTip = abilita lettura: 0 disabilta il clock
keybAvailTip = disponibile: 1 quando il buffer contiene caratteri
keybOutputTip = Dati: il valore %s del carattere frontale del buffer
# io/Led.java
ledComponent = LED
# io/RGBLed.java
rgbledComponent = RGB LED
ioMultiBit = Multibit?
# io/DigitalOscilloscope.java
DigitalOscilloscopeComponent = Oscilloscopio Digitale
NStateAttr = Numero di Stati
ShowClockAttribute = Mostra Diagramma Clock
DrawClockFrontLine= Linee Fronte Clock
noOption= No
bothOption= Entrambi
BorderColor = Colore Bordo
DigitalOscilloscopeClock = Clock: aggiorna il diagramma ad ogni fronte
ClearDiagram = Input Clear: 1 cancella il diagramma
# io/SevenSegment.java
sevenSegmentComponent = Display a 7 segmenti
# io/HexDigit.java
hexDigitComponent = Display esadecimale digitale
# io/DotMatrix.java
dotMatrixComponent = Matrice di LED
ioMatrixInput = Formato Input 
ioMatrixRows = Righe della matrice
ioMatrixCols = Colonne della matrice
ioOnColor = Colore On
ioOffColor = Colore Off
ioBackgroundColor = Sfondo
ioMatrixPersistenceAttr = Persistenza della luce
ioMatrixShape = Forme dei punti
ioInputColumn = Colonne
ioInputRow = Righe
ioInputSelect = Seleziona righe/colonne
ioShapeCircle = Cerchi
ioShapeSquare = Quadrati
# io/Tty.java
ttyComponent = TTY
ttyDesc = TTY (%s righe, %s colonne)
ttyDescShort = TTY
ttyRowsAttr = Righe 
ttyColsAttr = Colonne
ttyClearTip = Clear: 1 Pulisce lo schermo
ttyClockTip = Clock: All' aggiornamento stampa il carattere in input
ttyEnableTip = Abilita Scrittura: 0 disabilita il clock
ttyInputTip = Dati: valore %s del prossimo carattere da scrivere
